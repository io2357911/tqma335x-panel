; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Панель tqma3352"
#define MyAppVersion "1.0"
#define MyAppPublisher ""
#define MyAppURL ""
#define MyAppExeName "panel.exe"
#define MyProjectPath "C:\projects\panel\panel"
#define MyQtIntallPath "C:\Qt\5.8\mingw53_32"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{8A2C754B-BDD2-4FE8-A696-9EDB62E1FCB6}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
VersionInfoVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputBaseFilename=setup
;SetupIconFile={#MyProjectPath}\asu\icon.ico
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin
ChangesEnvironment=yes

[Languages]
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"

[Dirs]
Name: "{app}"; Permissions: users-modify

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
Source: "{#MyProjectPath}\build\pc\Release\panel.exe"; DestDir: "{app}"; Flags: ignoreversion;
Source: "{#MyProjectPath}\install\win\*"; DestDir: "{app}"; Flags: ignoreversion;
Source: "{#MyQtIntallPath}\bin\Qt5Widgets.dll"; DestDir: "{app}"; Flags: ignoreversion;
Source: "{#MyQtIntallPath}\bin\Qt5Script.dll"; DestDir: "{app}"; Flags: ignoreversion;
Source: "{#MyQtIntallPath}\bin\Qt5Network.dll"; DestDir: "{app}"; Flags: ignoreversion;
Source: "{#MyQtIntallPath}\bin\Qt5Gui.dll"; DestDir: "{app}"; Flags: ignoreversion;
Source: "{#MyQtIntallPath}\bin\Qt5Core.dll"; DestDir: "{app}"; Flags: ignoreversion;
Source: "{#MyQtIntallPath}\bin\libwinpthread-1.dll"; DestDir: "{app}"; Flags: ignoreversion;
Source: "{#MyQtIntallPath}\bin\libstdc++-6.dll"; DestDir: "{app}"; Flags: ignoreversion;
Source: "{#MyQtIntallPath}\bin\libgcc_s_dw2-1.dll"; DestDir: "{app}"; Flags: ignoreversion;
Source: "{#MyQtIntallPath}\plugins\platforms\qwindows.dll"; DestDir: "{app}\platforms"; Flags: ignoreversion;
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]    
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent runascurrentuser

[UninstallDelete]
;[Registry]
;Root:  HKCU; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueName: "{app}\bin\{#MyAppExeName}"; ValueType: string; ValueData: "RUNASADMIN"; Flags: createvalueifdoesntexist uninsdeletevalue;
;Root:  HKLM; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueName: "{app}\bin\{#MyAppExeName}"; ValueType: string; ValueData: "RUNASADMIN"; Flags: createvalueifdoesntexist uninsdeletevalue;
;Root:  HKCU; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueName: "{app}\lib\upsOnConnected.bat"; ValueType: string; ValueData: "RUNASADMIN"; Flags: createvalueifdoesntexist uninsdeletevalue;
;Root:  HKLM; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueName: "{app}\lib\upsOnConnected.bat"; ValueType: string; ValueData: "RUNASADMIN"; Flags: createvalueifdoesntexist uninsdeletevalue;
;Root:  HKCU; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueName: "{app}\lib\upsOnDisconnected.bat"; ValueType: string; ValueData: "RUNASADMIN"; Flags: createvalueifdoesntexist uninsdeletevalue;
;Root:  HKLM; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueName: "{app}\lib\upsOnDisconnected.bat"; ValueType: string; ValueData: "RUNASADMIN"; Flags: createvalueifdoesntexist uninsdeletevalue;
;Root:  HKCU; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueName: "{app}\lib\upsOn.bat"; ValueType: string; ValueData: "RUNASADMIN"; Flags: createvalueifdoesntexist uninsdeletevalue;
;Root:  HKLM; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueName: "{app}\lib\upsOn.bat"; ValueType: string; ValueData: "RUNASADMIN"; Flags: createvalueifdoesntexist uninsdeletevalue;
;Root:  HKCU; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueName: "{app}\lib\upsOff.bat"; ValueType: string; ValueData: "RUNASADMIN"; Flags: createvalueifdoesntexist uninsdeletevalue;
;Root:  HKLM; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueName: "{app}\lib\upsOff.bat"; ValueType: string; ValueData: "RUNASADMIN"; Flags: createvalueifdoesntexist uninsdeletevalue;

[Code]
function IsFrameworkInstalled: boolean;
begin
  //Result := RegKeyExists(HKLM,'SOFTWARE\Microsoft\.NETFramework\v4.0.30319');
  Result := RegKeyExists(HKLM,'SOFTWARE\Microsoft\.NETFramework\policy\v4.0');
end;

function IsVBInstalled: boolean;
begin
  Result := RegKeyExists(HKLM,'SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{0F8B4D17-8E99-3C8B-9558-9099C6F85A71}');
end;

procedure RunOtherInstaller1;
var
  ResultCode: Integer;
begin
  if (IsVBInstalled = false) then begin
  if not Exec(ExpandConstant('{app}\VisualBasicPowerPacksSetup.exe'), '', '', SW_SHOWNORMAL,
    ewWaitUntilTerminated, ResultCode)
  then
    MsgBox('Other installer failed to run!' + #13#10 +
      SysErrorMessage(ResultCode), mbError, MB_OK);
  end
end;

procedure RunOtherInstaller2;
var
  ResultCode: Integer;
begin
  if (IsFrameworkInstalled = false) then begin
  if not Exec(ExpandConstant('{app}\NDP451-KB2858728-x86-x64-AllOS-ENU.exe'), '', '', SW_SHOWNORMAL,
    ewWaitUntilTerminated, ResultCode)
  then
    MsgBox('Other installer failed to run!' + #13#10 +
      SysErrorMessage(ResultCode), mbError, MB_OK);
  end;
end;

//изменения PATH

procedure SetEnvironmentPath(NewPath: String);
var
  PathStr: String;
begin
  {Получаем значение текущего системного %PATH%}
  RegQueryStringValue(HKLM,'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', PathStr);
  {Ищем NewPath в текущем системном %PATH%}
  if Pos(NewPath, PathStr) <= 0 then // Если в текущем %PATH% не найдено NewPath;
  begin
    PathStr := NewPath + ';' + PathStr;
    RegWriteStringValue(HKLM,'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', PathStr);
  end;
end;

procedure DeleteEnvironmentPath(OldPath: String);
var
  PathStr: String;
  StartPos, Len: Integer;
begin
  {Получаем значение текущего системного %PATH%}
  RegQueryStringValue(HKLM,'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', PathStr);

  {Ищем OldPath c ";" в текущем системном %PATH%}
  StartPos := Pos(OldPath + ';', PathStr); //индекс начала вхождения OldPath c ";"
  if StartPos > 0 then // Если в текущем %PATH% найден OldPath;
  begin
    Len := Length(OldPath + ';');   //длина строки OldPath c ";"
    Delete(PathStr, StartPos, Len); // удаляем из текущего системного %PATH% (PathStr) строку OldPath c ";"
    {Записываем изменения в реестр}
    RegWriteStringValue(HKLM,'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', PathStr);
    Exit;
  end;

  {Ищем OldPath без ";" в текущем системном %PATH%}
  StartPos := Pos(OldPath, PathStr);
  if StartPos > 0 then // Если в текущем %PATH% найден OldPath без ";"
  begin
    Len := Length(OldPath); //индекс начала вхождения OldPath без ";"
    Delete(PathStr, StartPos, Len); // удаляем из текущего системного %PATH% (PathStr) строку OldPath без ";"
    {Записываем изменения в реестр}
    RegWriteStringValue(HKLM,'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', PathStr);
  end;
end;

  {После инсталляции:}
  procedure CurStepChanged(CurStep: TSetupStep);
  begin
    if CurStep = ssPostInstall then
    begin
     SetEnvironmentPath(ExpandConstant('{app}\bin'));
    end;
  end;

 {Перед деинсталляцией:}
 procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
 begin
    if CurUninstallStep = usUninstall then
  begin
      DeleteEnvironmentPath(ExpandConstant('{app}\bin'));
    end;
 end;



